if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GOSemSim")
goSim("GO:0004022", "GO:0004024", semData=d, measure="Wang")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
setwd("~/GitHub/DEG-ellipse")
colData <- read.csv("colData.csv",header = FALSE, sep = ",")
cts <- read.csv("cts.csv",header = FALSE, sep = ",")
batch <- read.csv("batch.csv",header = FALSE, sep = ",")
condition <- read.csv("condition.csv",header = FALSE, sep = ",")
geneName <- read.csv("geneName.csv",header = FALSE, sep = ",")
# create foactor of group condition labels
grps <- as.factor(condition$V1)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
y <- normLibSizes(y)
design <- model.matrix(~grps)
y <- estimateDisp(y,design)
install.packages(c("bbmle", "bdsmatrix", "BH", "BiocManager", "bitops", "boot", "brew", "brio", "bslib", "cachem", "callr", "cli", "cluster", "coda", "codetools", "colorspace", "commonmark", "cpp11", "crayon", "crosstalk", "curl", "DBI", "dbplyr", "desc", "digest", "downlit", "dplyr", "DT", "evaluate", "fansi", "farver", "fastmap", "filelock", "foreign", "fs", "gert", "ggplot2", "gh", "glue", "GSA", "gtable", "highr", "htmltools", "htmlwidgets", "httpuv", "httr2", "jsonlite", "KernSmooth", "knitr", "later", "lattice", "locfit", "matrixStats", "mgcv", "mixsqp", "munsell", "mvtnorm", "nlme", "openssl", "openxlsx", "pkgbuild", "pkgdown", "pkgload", "processx", "progress", "promises", "ps", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "remotes", "rlang", "rmarkdown", "roxygen2", "rpart", "RSQLite", "rstudioapi", "sass", "scales", "shiny", "stringi", "survival", "systemfonts", "testthat", "textshaping", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "vroom", "withr", "xfun", "XML", "xml2", "xopen", "yaml", "zip"))
setwd("~/GitHub/DEG-ellipse")
colData <- read.csv("colData.csv",header = FALSE, sep = ",")
cts <- read.csv("cts.csv",header = FALSE, sep = ",")
batch <- read.csv("batch.csv",header = FALSE, sep = ",")
condition <- read.csv("condition.csv",header = FALSE, sep = ",")
geneName <- read.csv("geneName.csv",header = FALSE, sep = ",")
# create foactor of group condition labels
grps <- as.factor(condition$V1)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
library(edgeR)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
y <- normLibSizes(y)
design <- model.matrix(~grps)
y <- estimateDisp(y,design)
logcpm <- cpm(y, log=TRUE)
plotMDS(y)
plotBCV(y)
# perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
plotMD(lrt)
# perform quasi-likelihood F-tests:
# more conservative p-vals/FDR
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
topTags(qlf)
plotQLDisp(fit)
plotMD(qlf)
# export results to MATLAB (.csv)
exportResults <- data.frame(gene_name = geneName[row.names(lrt[["coefficients"]]),1],
logFC = lrt[["table"]][["logFC"]],
logCPM = lrt[["table"]][["logCPM"]],
L_ratio = lrt[["table"]][["LR"]],
p_val = lrt[["table"]][["PValue"]],
qF_test = qlf[["table"]][["F"]],
qF_p_val = qlf[["table"]][["PValue"]])
write.csv(exportResults,"benchmark_edgeR2.csv",row.names = FALSE)
setwd("E:/MAGE paper/MAGE MATLAB/workspaces/edgeR")
setwd("~/GitHub/DEG-ellipse")
setwd("E:/MAGE paper/MAGE MATLAB")
setwd("E:/MAGE paper/MAGE MATLAB/workspaces/edgeR")
colData <- read.csv("colData.csv",header = FALSE, sep = ",")
cts <- read.csv("cts.csv",header = FALSE, sep = ",")
batch <- read.csv("batch.csv",header = FALSE, sep = ",")
condition <- read.csv("condition.csv",header = FALSE, sep = ",")
geneName <- read.csv("geneName.csv",header = FALSE, sep = ",")
# create foactor of group condition labels
grps <- as.factor(condition$V1)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
y <- normLibSizes(y)
design <- model.matrix(~grps)
y <- estimateDisp(y,design)
logcpm <- cpm(y, log=TRUE)
plotMDS(y)
plotBCV(y)
# perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
plotMD(lrt)
# perform quasi-likelihood F-tests:
# more conservative p-vals/FDR
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
topTags(qlf)
plotQLDisp(fit)
plotMD(qlf)
# export results to MATLAB (.csv)
exportResults <- data.frame(gene_name = geneName[row.names(lrt[["coefficients"]]),1],
logFC = lrt[["table"]][["logFC"]],
logCPM = lrt[["table"]][["logCPM"]],
L_ratio = lrt[["table"]][["LR"]],
p_val = lrt[["table"]][["PValue"]],
qF_test = qlf[["table"]][["F"]],
qF_p_val = qlf[["table"]][["PValue"]])
write.csv(exportResults,"benchmark_edgeR.csv",row.names = FALSE)
setwd("E:/MAGE paper/MAGE MATLAB/workspaces/edgeR")
colData <- read.csv("colData.csv",header = FALSE, sep = ",")
cts <- read.csv("cts.csv",header = FALSE, sep = ",")
batch <- read.csv("batch.csv",header = FALSE, sep = ",")
condition <- read.csv("condition.csv",header = FALSE, sep = ",")
geneName <- read.csv("geneName.csv",header = FALSE, sep = ",")
# create foactor of group condition labels
grps <- as.factor(condition$V1)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
y <- normLibSizes(y)
design <- model.matrix(~grps)
y <- estimateDisp(y,design)
logcpm <- cpm(y, log=TRUE)
setwd("E:/MAGE paper/MAGE MATLAB/workspaces/edgeR")
colData <- read.csv("colData.csv",header = FALSE, sep = ",")
cts <- read.csv("cts.csv",header = FALSE, sep = ",")
batch <- read.csv("batch.csv",header = FALSE, sep = ",")
condition <- read.csv("condition.csv",header = FALSE, sep = ",")
geneName <- read.csv("geneName.csv",header = FALSE, sep = ",")
# create foactor of group condition labels
grps <- as.factor(condition$V1)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
y <- normLibSizes(y)
design <- model.matrix(~grps)
y <- estimateDisp(y,design)
logcpm <- cpm(y, log=TRUE)
plotMDS(y)
plotBCV(y)
# perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
plotMD(lrt)
# perform quasi-likelihood F-tests:
# more conservative p-vals/FDR
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
topTags(qlf)
plotQLDisp(fit)
plotMD(qlf)
# export results to MATLAB (.csv)
exportResults <- data.frame(gene_name = geneName[row.names(lrt[["coefficients"]]),1],
logFC = lrt[["table"]][["logFC"]],
logCPM = lrt[["table"]][["logCPM"]],
L_ratio = lrt[["table"]][["LR"]],
p_val = lrt[["table"]][["PValue"]],
qF_test = qlf[["table"]][["F"]],
qF_p_val = qlf[["table"]][["PValue"]])
write.csv(exportResults,"benchmark_edgeR.csv",row.names = FALSE)
write.csv(exportResults,"benchmark_edgeR.csv",row.names = FALSE)
setwd("E:/MAGE paper/MAGE MATLAB/workspaces/edgeR")
colData <- read.csv("colData.csv",header = FALSE, sep = ",")
cts <- read.csv("cts.csv",header = FALSE, sep = ",")
batch <- read.csv("batch.csv",header = FALSE, sep = ",")
condition <- read.csv("condition.csv",header = FALSE, sep = ",")
geneName <- read.csv("geneName.csv",header = FALSE, sep = ",")
# create foactor of group condition labels
grps <- as.factor(condition$V1)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
y <- normLibSizes(y)
design <- model.matrix(~grps)
y <- estimateDisp(y,design)
logcpm <- cpm(y, log=TRUE)
plotMDS(y)
plotBCV(y)
# perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
plotMD(lrt)
# perform quasi-likelihood F-tests:
# more conservative p-vals/FDR
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
topTags(qlf)
plotQLDisp(fit)
plotMD(qlf)
setwd("E:/MAGE paper/MAGE MATLAB/workspaces/edgeR")
colData <- read.csv("colData.csv",header = FALSE, sep = ",")
cts <- read.csv("cts.csv",header = FALSE, sep = ",")
batch <- read.csv("batch.csv",header = FALSE, sep = ",")
condition <- read.csv("condition.csv",header = FALSE, sep = ",")
geneName <- read.csv("geneName.csv",header = FALSE, sep = ",")
# create foactor of group condition labels
grps <- as.factor(condition$V1)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
# filtering
keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
y <- normLibSizes(y)
design <- model.matrix(~grps)
y <- estimateDisp(y,design)
logcpm <- cpm(y, log=TRUE)
plotMDS(y)
plotBCV(y)
# perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
plotMD(lrt)
# perform quasi-likelihood F-tests:
# more conservative p-vals/FDR
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
topTags(qlf)
plotQLDisp(fit)
plotMD(qlf)
setwd("E:/MAGE paper/MAGE MATLAB/workspaces/edgeR")
colData <- read.csv("colData.csv",header = FALSE, sep = ",")
cts <- read.csv("cts.csv",header = FALSE, sep = ",")
batch <- read.csv("batch.csv",header = FALSE, sep = ",")
condition <- read.csv("condition.csv",header = FALSE, sep = ",")
geneName <- read.csv("geneName.csv",header = FALSE, sep = ",")
# create foactor of group condition labels
grps <- as.factor(condition$V1)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
y <- normLibSizes(y)
design <- model.matrix(~grps)
y <- estimateDisp(y,design)
logcpm <- cpm(y, log=TRUE)
plotMDS(y)
plotBCV(y)
# perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
plotMD(lrt)
# perform quasi-likelihood F-tests:
# more conservative p-vals/FDR
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
topTags(qlf)
plotQLDisp(fit)
plotMD(qlf)
# export results to MATLAB (.csv)
exportResults <- data.frame(gene_name = geneName[row.names(lrt[["coefficients"]]),1],
logFC = lrt[["table"]][["logFC"]],
logCPM = lrt[["table"]][["logCPM"]],
L_ratio = lrt[["table"]][["LR"]],
p_val = lrt[["table"]][["PValue"]],
qF_test = qlf[["table"]][["F"]],
qF_p_val = qlf[["table"]][["PValue"]])
write.csv(exportResults,"benchmark_edgeR.csv",row.names = FALSE)
setwd("E:/MAGE paper/MAGE MATLAB/workspaces/edgeR")
colData <- read.csv("colData.csv",header = FALSE, sep = ",")
cts <- read.csv("cts.csv",header = FALSE, sep = ",")
batch <- read.csv("batch.csv",header = FALSE, sep = ",")
condition <- read.csv("condition.csv",header = FALSE, sep = ",")
geneName <- read.csv("geneName.csv",header = FALSE, sep = ",")
# create foactor of group condition labels
grps <- as.factor(condition$V1)
# create edgeR object DGEList
y <- DGEList(counts=cts,group=grps)
y <- normLibSizes(y)
design <- model.matrix(~grps)
y <- estimateDisp(y,design)
logcpm <- cpm(y, log=TRUE)
plotMDS(y)
plotBCV(y)
# perform likelihood ratio tests:
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
plotMD(lrt)
# perform quasi-likelihood F-tests:
# more conservative p-vals/FDR
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
topTags(qlf)
plotQLDisp(fit)
plotMD(qlf)
# export results to MATLAB (.csv)
exportResults <- data.frame(gene_name = geneName[row.names(lrt[["coefficients"]]),1],
logFC = lrt[["table"]][["logFC"]],
logCPM = lrt[["table"]][["logCPM"]],
L_ratio = lrt[["table"]][["LR"]],
p_val = lrt[["table"]][["PValue"]],
qF_test = qlf[["table"]][["F"]],
qF_p_val = qlf[["table"]][["PValue"]])
